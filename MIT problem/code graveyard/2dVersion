{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Lex3lyH2FpLG"},"outputs":[],"source":["import numpy as np\n","import math\n","import matplotlib.pyplot as plt\n","from queue import PriorityQueue\n","\n","\n","R, L, U, D = 1.1, 0.1, 1.1, 0.1 #R if i < i + 1, U if j < j + 1\n","N = 20\n","T = 15 #time"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VUc9I-_fi__v"},"outputs":[],"source":["def findMin(N, waitingTimesH, waitingTimesV):\n","  minWT = waitingTimesH[0][0]\n","  posX, posY = 0, 0\n","  isHorizantalEdge = True\n","\n","  for i in range(2*N):\n","    for j in range(2*N + 1):\n","      if (waitingTimesH[i][j] < minWT):\n","        minWT = waitingTimesH[i][j]\n","        posX = i\n","        posY = j\n","        isHorizantalEdge = True\n","  for i in range(2 * N + 1):\n","    for j in range(2 * N):\n","      if (waitingTimesV[i][j] < minWT):\n","        minWT = waitingTimesV[i][j]\n","        posX = i\n","        posY = j\n","        isHorizantalEdge = False \n","\n","  return minWT, posX, posY, isHorizantalEdge"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x6pTD8EBGVSD"},"outputs":[],"source":["def printArr(arr):\n","  for i in range(len(arr[0])):\n","    line = \"\"\n","    for j in range(len(arr)):\n","      line += str(arr[j][i]) + \" \"\n","    print(line)\n","  print(\"\\n\\n\\n\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XnaXRXVniVRi"},"outputs":[],"source":["def simulate():\n","  grid = [ [0, 0]*(2 * N + 1) for i in range(2 * N + 1)]\n","  waitingTimesH, waitingTimesV = [ [0]*(2 * N + 1) for i in range(2 * N)], [ [0]*(2 * N) for i in range(2 * N + 1)] \n","  #waitingTimesH[i][j] is edge from (i, j) to (i + 1, j)\n","\n","  for i in range (2 * N + 1):\n","    for j in range (2 * N + 1):\n","      grid[i][j] = [i, j]\n","\n","\n","  posNN = [[N, N]]\n","  times = [0]\n","  timeElapsed = 0;\n","  count = 0\n","\n","\n","  #intial alarm clocks\n","  for i in range(2*N):\n","    for j in range(2*N + 1):\n","      waitingTimesH[i][j] = -1/R * np.log(np.random.uniform(0, 1))\n","  for i in range(2 * N + 1):\n","    for j in range(2 * N):\n","      waitingTimesV[i][j] = -1/U * np.log(np.random.uniform(0, 1))\n","\n","  while (timeElapsed < T):\n","    count += 1\n","    minWT, posX, posY, isHorizantalEdge = findMin(N, waitingTimesH, waitingTimesV)\n","\n","    # print(\"count == \" + str(count) + \", timeElapsed == \" + str(timeElapsed))\n","    # print(\"horizontal waiting times: \")\n","    # printArr(waitingTimesH)\n","    # print(\"vertical waiting times: \")\n","    # printArr(waitingTimesV)\n","    # print(posX, posY)\n","\n","    timeElapsed = minWT\n","    #print(timeElapsed)\n","\n","\n","    #record change\n","    if (grid[posX][posY] == [N, N] and isHorizantalEdge):\n","      posNN.append([posNN[-1][0] + 1, posNN[-1][1]])\n","      times.append(timeElapsed)\n","    elif (grid[posX][posY] == [N, N] and (not isHorizantalEdge)):\n","      posNN.append([posNN[-1][0], posNN[-1][1] + 1])\n","      times.append(timeElapsed)\n","    elif (posX < 2 * N and grid[posX + 1][posY] == [N, N] and (isHorizantalEdge)):\n","      posNN.append([posNN[-1][0] - 1, posNN[-1][1]])\n","      times.append(timeElapsed)\n","    elif (posY < 2 * N and grid[posX][posY + 1] == [N, N] and (not isHorizantalEdge)):\n","      posNN.append([posNN[-1][0], posNN[-1][1] - 1])\n","      times.append(timeElapsed)\n","\n","\n","    #switch on the number line\n","    if (posX < 2*N and isHorizantalEdge):\n","      temp = grid[posX][posY]\n","      grid[posX][posY] = grid[posX + 1][posY]\n","      grid[posX + 1][posY] = temp\n","    if (posY < 2*N and (not isHorizantalEdge)):\n","      temp = grid[posX][posY]\n","      grid[posX][posY] = grid[posX][posY + 1]\n","      grid[posX][posY + 1] = temp\n","\n","    #fixing waiting times\n","\n","\n","    if (isHorizantalEdge):\n","      #horizantal fixes\n","      if (posX > 0):\n","        waitingTimesH[posX - 1][posY] = waitingTimesH[posX][posY]\n","        waitingTimesH[posX - 1][posY] += -1/R * np.log(np.random.uniform(0, 1)) if grid[posX-1][posY][0] < grid[posX][posY][0] else -1/L * np.log(np.random.uniform(0, 1))\n","      if (posX + 1 < 2*N):\n","        waitingTimesH[posX + 1][posY] = waitingTimesH[posX][posY]\n","        waitingTimesH[posX + 1][posY] += -1/R * np.log(np.random.uniform(0, 1)) if grid[posX + 1][posY][0] < grid[posX + 2][posY][0] else -1/L * np.log(np.random.uniform(0, 1))\n","      #vertical fixes\n","      if (posY > 0):\n","        waitingTimesV[posX][posY - 1] = waitingTimesH[posX][posY]\n","        waitingTimesV[posX][posY - 1] += -1/U * np.log(np.random.uniform(0, 1)) if grid[posX][posY - 1][1] < grid[posX][posY][1] else -1/D * np.log(np.random.uniform(0, 1))\n","        if (posX + 1 < 2 * N):\n","          waitingTimesV[posX + 1][posY - 1] = waitingTimesH[posX][posY]\n","          waitingTimesV[posX + 1][posY - 1] += -1/U * np.log(np.random.uniform(0, 1)) if grid[posX + 1][posY - 1][1] < grid[posX + 1][posY][1] else -1/D * np.log(np.random.uniform(0, 1))\n","      if (posY < 2 * N):\n","        waitingTimesV[posX][posY] = waitingTimesH[posX][posY]\n","        waitingTimesV[posX][posY] += -1/U * np.log(np.random.uniform(0, 1)) if grid[posX][posY][1] < grid[posX][posY + 1][1] else -1/D * np.log(np.random.uniform(0, 1))\n","        if (posX + 1 < 2 * N):\n","          waitingTimesV[posX + 1][posY] = waitingTimesH[posX][posY]\n","          waitingTimesV[posX + 1][posY] += -1/U * np.log(np.random.uniform(0, 1)) if grid[posX + 1][posY][1] < grid[posX + 1][posY + 1][1] else -1/D * np.log(np.random.uniform(0, 1))\n","      waitingTimesH[posX][posY] += -1/R * np.log(np.random.uniform(0, 1)) if grid[posX][posY][1] < grid[posX + 1][posY][1] else -1/L * np.log(np.random.uniform(0, 1))\n","\n","\n","    else:\n","      #vertical fixes\n","      if (posY > 0):\n","        waitingTimesV[posX][posY - 1] = waitingTimesV[posX][posY]\n","        waitingTimesV[posX][posY - 1] += -1/U * np.log(np.random.uniform(0, 1)) if grid[posX][posY - 1][1] < grid[posX][posY][1] else -1/D * np.log(np.random.uniform(0, 1))\n","      if (posY + 1 < 2*N):\n","        waitingTimesV[posX][posY + 1] = waitingTimesV[posX][posY]\n","        waitingTimesV[posX][posY + 1] += -1/U * np.log(np.random.uniform(0, 1)) if grid[posX][posY + 1][1] < grid[posX][posY + 2][1] else -1/D * np.log(np.random.uniform(0, 1))\n","      #horizantol fixes\n","      if (posX > 0):\n","        waitingTimesH[posX - 1][posY] = waitingTimesV[posX][posY]\n","        waitingTimesH[posX - 1][posY] += -1/R * np.log(np.random.uniform(0, 1)) if grid[posX - 1][posY][0] < grid[posX][posY][0] else -1/L * np.log(np.random.uniform(0, 1))\n","        if (posY + 1 < 2 * N):\n","          waitingTimesH[posX - 1][posY + 1] = waitingTimesV[posX][posY]\n","          waitingTimesH[posX - 1][posY + 1] += -1/R * np.log(np.random.uniform(0, 1)) if grid[posX - 1][posY + 1][0] < grid[posX - 1][posY + 1][0] else -1/L * np.log(np.random.uniform(0, 1))\n","      if (posX  < 2 * N):\n","        waitingTimesH[posX][posY] = waitingTimesV[posX][posY]\n","        waitingTimesH[posX][posY] += -1/R * np.log(np.random.uniform(0, 1)) if grid[posX][posY][0] < grid[posX + 1][posY][0] else -1/L * np.log(np.random.uniform(0, 1))\n","        if (posY + 1 < 2 * N):\n","          waitingTimesH[posX][posY + 1] = waitingTimesV[posX][posY]\n","          waitingTimesH[posX][posY + 1] += -1/R * np.log(np.random.uniform(0, 1)) if grid[posX][posY + 1][0] < grid[posX + 1][posY + 1][0] else -1/L * np.log(np.random.uniform(0, 1))\n","      waitingTimesV[posX][posY] += -1/U * np.log(np.random.uniform(0, 1)) if grid[posX][posY][0] < grid[posX][posY + 1][0] else -1/D * np.log(np.random.uniform(0, 1))\n","\n","\n","\n","   \n","\n","  print(count)\n","  return times, posNN\n","  #plt.plot(times, posN)\n","  #plt.show()\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":953},"id":"We0yY5fSwhpR","executionInfo":{"status":"ok","timestamp":1671633537652,"user_tz":300,"elapsed":14534,"user":{"displayName":"Jaiden Shin","userId":"03276079734548615298"}},"outputId":"005f60bb-11f4-476c-ce4c-793a11d080a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","28143\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x1152 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["numPaths = 1\n","\n","plt.figure(figsize = (16, 16))\n","\n","for i in range (numPaths):\n","  print(i)\n","  times, posNN = simulate()\n","  posNN = np.array(posNN)\n","  plt.plot(posNN[:, 0], posNN[:, 1])\n","\n","plt.show()"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}